//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;

namespace OpenDentBusiness.Crud{
	public class ChildTeacherCrud {
		///<summary>Gets one ChildTeacher object from the database using the primary key.  Returns null if not found.</summary>
		public static ChildTeacher SelectOne(long childTeacherNum) {
			string command="SELECT * FROM childteacher "
				+"WHERE ChildTeacherNum = "+POut.Long(childTeacherNum);
			List<ChildTeacher> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one ChildTeacher object from the database using a query.</summary>
		public static ChildTeacher SelectOne(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildTeacher> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of ChildTeacher objects from the database using a query.</summary>
		public static List<ChildTeacher> SelectMany(string command) {
			if(RemotingClient.MiddleTierRole==MiddleTierRole.ClientMT) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<ChildTeacher> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<ChildTeacher> TableToList(DataTable table) {
			List<ChildTeacher> retVal=new List<ChildTeacher>();
			ChildTeacher childTeacher;
			foreach(DataRow row in table.Rows) {
				childTeacher=new ChildTeacher();
				childTeacher.ChildTeacherNum= PIn.Long  (row["ChildTeacherNum"].ToString());
				childTeacher.UserNum        = PIn.Long  (row["UserNum"].ToString());
				childTeacher.Notes          = PIn.String(row["Notes"].ToString());
				retVal.Add(childTeacher);
			}
			return retVal;
		}

		///<summary>Converts a list of ChildTeacher into a DataTable.</summary>
		public static DataTable ListToTable(List<ChildTeacher> listChildTeachers,string tableName="") {
			if(string.IsNullOrEmpty(tableName)) {
				tableName="ChildTeacher";
			}
			DataTable table=new DataTable(tableName);
			table.Columns.Add("ChildTeacherNum");
			table.Columns.Add("UserNum");
			table.Columns.Add("Notes");
			foreach(ChildTeacher childTeacher in listChildTeachers) {
				table.Rows.Add(new object[] {
					POut.Long  (childTeacher.ChildTeacherNum),
					POut.Long  (childTeacher.UserNum),
					            childTeacher.Notes,
				});
			}
			return table;
		}

		///<summary>Inserts one ChildTeacher into the database.  Returns the new priKey.</summary>
		public static long Insert(ChildTeacher childTeacher) {
			return Insert(childTeacher,false);
		}

		///<summary>Inserts one ChildTeacher into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(ChildTeacher childTeacher,bool useExistingPK) {
			if(!useExistingPK && PrefC.RandomKeys) {
				childTeacher.ChildTeacherNum=ReplicationServers.GetKey("childteacher","ChildTeacherNum");
			}
			string command="INSERT INTO childteacher (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="ChildTeacherNum,";
			}
			command+="UserNum,Notes) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(childTeacher.ChildTeacherNum)+",";
			}
			command+=
				     POut.Long  (childTeacher.UserNum)+","
				+"'"+POut.String(childTeacher.Notes)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				childTeacher.ChildTeacherNum=Db.NonQ(command,true,"ChildTeacherNum","childTeacher");
			}
			return childTeacher.ChildTeacherNum;
		}

		///<summary>Inserts one ChildTeacher into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildTeacher childTeacher) {
			return InsertNoCache(childTeacher,false);
		}

		///<summary>Inserts one ChildTeacher into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(ChildTeacher childTeacher,bool useExistingPK) {
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO childteacher (";
			if(!useExistingPK && isRandomKeys) {
				childTeacher.ChildTeacherNum=ReplicationServers.GetKeyNoCache("childteacher","ChildTeacherNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="ChildTeacherNum,";
			}
			command+="UserNum,Notes) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(childTeacher.ChildTeacherNum)+",";
			}
			command+=
				     POut.Long  (childTeacher.UserNum)+","
				+"'"+POut.String(childTeacher.Notes)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				childTeacher.ChildTeacherNum=Db.NonQ(command,true,"ChildTeacherNum","childTeacher");
			}
			return childTeacher.ChildTeacherNum;
		}

		///<summary>Updates one ChildTeacher in the database.</summary>
		public static void Update(ChildTeacher childTeacher) {
			string command="UPDATE childteacher SET "
				+"UserNum        =  "+POut.Long  (childTeacher.UserNum)+", "
				+"Notes          = '"+POut.String(childTeacher.Notes)+"' "
				+"WHERE ChildTeacherNum = "+POut.Long(childTeacher.ChildTeacherNum);
			Db.NonQ(command);
		}

		///<summary>Updates one ChildTeacher in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(ChildTeacher childTeacher,ChildTeacher oldChildTeacher) {
			string command="";
			if(childTeacher.UserNum != oldChildTeacher.UserNum) {
				if(command!="") { command+=",";}
				command+="UserNum = "+POut.Long(childTeacher.UserNum)+"";
			}
			if(childTeacher.Notes != oldChildTeacher.Notes) {
				if(command!="") { command+=",";}
				command+="Notes = '"+POut.String(childTeacher.Notes)+"'";
			}
			if(command=="") {
				return false;
			}
			command="UPDATE childteacher SET "+command
				+" WHERE ChildTeacherNum = "+POut.Long(childTeacher.ChildTeacherNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(ChildTeacher,ChildTeacher) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(ChildTeacher childTeacher,ChildTeacher oldChildTeacher) {
			if(childTeacher.UserNum != oldChildTeacher.UserNum) {
				return true;
			}
			if(childTeacher.Notes != oldChildTeacher.Notes) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one ChildTeacher from the database.</summary>
		public static void Delete(long childTeacherNum) {
			string command="DELETE FROM childteacher "
				+"WHERE ChildTeacherNum = "+POut.Long(childTeacherNum);
			Db.NonQ(command);
		}

		///<summary>Deletes many ChildTeachers from the database.</summary>
		public static void DeleteMany(List<long> listChildTeacherNums) {
			if(listChildTeacherNums==null || listChildTeacherNums.Count==0) {
				return;
			}
			string command="DELETE FROM childteacher "
				+"WHERE ChildTeacherNum IN("+string.Join(",",listChildTeacherNums.Select(x => POut.Long(x)))+")";
			Db.NonQ(command);
		}

	}
}